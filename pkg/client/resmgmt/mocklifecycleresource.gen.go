// Code generated by counterfeiter. DO NOT EDIT.
package resmgmt

import (
	reqContext "context"
	"sync"

	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
	"github.com/hyperledger/fabric-sdk-go/pkg/fab/resource"
)

type MockLifecycleResource struct {
	InstallStub        func(reqCtx reqContext.Context, installPkg []byte, targets []fab.ProposalProcessor, opts ...resource.Opt) ([]*resource.LifecycleInstallProposalResponse, error)
	installMutex       sync.RWMutex
	installArgsForCall []struct {
		reqCtx     reqContext.Context
		installPkg []byte
		targets    []fab.ProposalProcessor
		opts       []resource.Opt
	}
	installReturns struct {
		result1 []*resource.LifecycleInstallProposalResponse
		result2 error
	}
	installReturnsOnCall map[int]struct {
		result1 []*resource.LifecycleInstallProposalResponse
		result2 error
	}
	GetInstalledPackageStub        func(reqCtx reqContext.Context, packageID string, target fab.ProposalProcessor, opts ...resource.Opt) ([]byte, error)
	getInstalledPackageMutex       sync.RWMutex
	getInstalledPackageArgsForCall []struct {
		reqCtx    reqContext.Context
		packageID string
		target    fab.ProposalProcessor
		opts      []resource.Opt
	}
	getInstalledPackageReturns struct {
		result1 []byte
		result2 error
	}
	getInstalledPackageReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MockLifecycleResource) Install(reqCtx reqContext.Context, installPkg []byte, targets []fab.ProposalProcessor, opts ...resource.Opt) ([]*resource.LifecycleInstallProposalResponse, error) {
	var installPkgCopy []byte
	if installPkg != nil {
		installPkgCopy = make([]byte, len(installPkg))
		copy(installPkgCopy, installPkg)
	}
	var targetsCopy []fab.ProposalProcessor
	if targets != nil {
		targetsCopy = make([]fab.ProposalProcessor, len(targets))
		copy(targetsCopy, targets)
	}
	fake.installMutex.Lock()
	ret, specificReturn := fake.installReturnsOnCall[len(fake.installArgsForCall)]
	fake.installArgsForCall = append(fake.installArgsForCall, struct {
		reqCtx     reqContext.Context
		installPkg []byte
		targets    []fab.ProposalProcessor
		opts       []resource.Opt
	}{reqCtx, installPkgCopy, targetsCopy, opts})
	fake.recordInvocation("Install", []interface{}{reqCtx, installPkgCopy, targetsCopy, opts})
	fake.installMutex.Unlock()
	if fake.InstallStub != nil {
		return fake.InstallStub(reqCtx, installPkg, targets, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.installReturns.result1, fake.installReturns.result2
}

func (fake *MockLifecycleResource) InstallCallCount() int {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return len(fake.installArgsForCall)
}

func (fake *MockLifecycleResource) InstallArgsForCall(i int) (reqContext.Context, []byte, []fab.ProposalProcessor, []resource.Opt) {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return fake.installArgsForCall[i].reqCtx, fake.installArgsForCall[i].installPkg, fake.installArgsForCall[i].targets, fake.installArgsForCall[i].opts
}

func (fake *MockLifecycleResource) InstallReturns(result1 []*resource.LifecycleInstallProposalResponse, result2 error) {
	fake.InstallStub = nil
	fake.installReturns = struct {
		result1 []*resource.LifecycleInstallProposalResponse
		result2 error
	}{result1, result2}
}

func (fake *MockLifecycleResource) InstallReturnsOnCall(i int, result1 []*resource.LifecycleInstallProposalResponse, result2 error) {
	fake.InstallStub = nil
	if fake.installReturnsOnCall == nil {
		fake.installReturnsOnCall = make(map[int]struct {
			result1 []*resource.LifecycleInstallProposalResponse
			result2 error
		})
	}
	fake.installReturnsOnCall[i] = struct {
		result1 []*resource.LifecycleInstallProposalResponse
		result2 error
	}{result1, result2}
}

func (fake *MockLifecycleResource) GetInstalledPackage(reqCtx reqContext.Context, packageID string, target fab.ProposalProcessor, opts ...resource.Opt) ([]byte, error) {
	fake.getInstalledPackageMutex.Lock()
	ret, specificReturn := fake.getInstalledPackageReturnsOnCall[len(fake.getInstalledPackageArgsForCall)]
	fake.getInstalledPackageArgsForCall = append(fake.getInstalledPackageArgsForCall, struct {
		reqCtx    reqContext.Context
		packageID string
		target    fab.ProposalProcessor
		opts      []resource.Opt
	}{reqCtx, packageID, target, opts})
	fake.recordInvocation("GetInstalledPackage", []interface{}{reqCtx, packageID, target, opts})
	fake.getInstalledPackageMutex.Unlock()
	if fake.GetInstalledPackageStub != nil {
		return fake.GetInstalledPackageStub(reqCtx, packageID, target, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInstalledPackageReturns.result1, fake.getInstalledPackageReturns.result2
}

func (fake *MockLifecycleResource) GetInstalledPackageCallCount() int {
	fake.getInstalledPackageMutex.RLock()
	defer fake.getInstalledPackageMutex.RUnlock()
	return len(fake.getInstalledPackageArgsForCall)
}

func (fake *MockLifecycleResource) GetInstalledPackageArgsForCall(i int) (reqContext.Context, string, fab.ProposalProcessor, []resource.Opt) {
	fake.getInstalledPackageMutex.RLock()
	defer fake.getInstalledPackageMutex.RUnlock()
	return fake.getInstalledPackageArgsForCall[i].reqCtx, fake.getInstalledPackageArgsForCall[i].packageID, fake.getInstalledPackageArgsForCall[i].target, fake.getInstalledPackageArgsForCall[i].opts
}

func (fake *MockLifecycleResource) GetInstalledPackageReturns(result1 []byte, result2 error) {
	fake.GetInstalledPackageStub = nil
	fake.getInstalledPackageReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MockLifecycleResource) GetInstalledPackageReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetInstalledPackageStub = nil
	if fake.getInstalledPackageReturnsOnCall == nil {
		fake.getInstalledPackageReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getInstalledPackageReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MockLifecycleResource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	fake.getInstalledPackageMutex.RLock()
	defer fake.getInstalledPackageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MockLifecycleResource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

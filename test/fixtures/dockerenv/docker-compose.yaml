#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2.1'

services:
  org1ca1:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_CA_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_CA_FIXTURE_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=${ORG1CA1_FABRIC_CA_SERVER_CA_KEYFILE}
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/tls/peer/server.crt
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/tls/peer/server.key
      - FABRIC_CA_SERVER_TLS_CLIENTAUTH_TYPE
      - FABRIC_CA_SERVER_TLS_CERTFILES
      - FABRIC_CA_SERVER_CFG_AFFILIATIONS_ALLOWREMOVE=true
      - FABRIC_CA_SERVER_CFG_IDENTITIES_ALLOWREMOVE=true
      # TODO below env variable added to test Compatibility mode - remove when Fabric v1.3 is not supported anymore
      - FABRIC_CA_SERVER_COMPATIBILITY_MODE_V1_3=false
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/ca.org1.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/tlsca
    networks:
      default:
        aliases:
          - ca.org1.example.com

  org1tlsca:
    # NOTE: Cheating a bit with certs (re-using from other nodes) as Fabric's cryptogen tool
    # generates keys for only one CA instance per org. The goal is just to demonstrate that the SDK
    # can handle multiple CA instances per org.
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_CA_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_CA_FIXTURE_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=tlsca.org1.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=${ORG1TLSCA_FABRIC_CA_SERVER_CA_KEYFILE}
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/tls/peer/server.crt
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/tls/peer/server.key
      - FABRIC_CA_SERVER_TLS_CLIENTAUTH_TYPE
      - FABRIC_CA_SERVER_TLS_CERTFILES
      - FABRIC_CA_SERVER_CFG_AFFILIATIONS_ALLOWREMOVE=true
      - FABRIC_CA_SERVER_CFG_IDENTITIES_ALLOWREMOVE=true
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    ports:
      - "7154:7154"
    command: sh -c 'fabric-ca-server start -b admin2:adminpw2 -d -p 7154'
    volumes:
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/tlsca/:/etc/hyperledger/fabric-ca-server-config/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/ca.org1.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/tlsca
    networks:
      default:
        aliases:
          - ca.org1.example.com

  org2ca1:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_CA_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_CA_FIXTURE_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=${ORG2CA1_FABRIC_CA_SERVER_CA_KEYFILE}
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/tls/peer/server.crt
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/tls/peer/server.key
      - FABRIC_CA_SERVER_TLS_CLIENTAUTH_TYPE
      - FABRIC_CA_SERVER_TLS_CERTFILES
      - FABRIC_CA_SERVER_CFG_AFFILIATIONS_ALLOWREMOVE=true
      - FABRIC_CA_SERVER_CFG_IDENTITIES_ALLOWREMOVE=true
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    ports:
      - "8054:8054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d -p 8054'
    volumes:
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/ca.org2.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/tlsca
    networks:
      default:
        aliases:
          - ca.org2.example.com

  orderer1:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_ORDERER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_ORDERER_FIXTURE_TAG}
    environment:
      - FABRIC_LOGGING_SPEC=info
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=file
      - ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/configtx/twoorgs.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/tls/orderer/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/tls/orderer/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/tls/orderer/ca.crt]
      - ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED
      - ORDERER_GENERAL_TLS_CLIENTROOTCAS
      # Fabric 1.4 deprecated options
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/twoorgs.genesis.block
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
      - ../fabric/${FABRIC_FIXTURE_VERSION}/channel:/etc/hyperledger/configtx
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/etc/hyperledger/msp/orderer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls:/etc/hyperledger/tls/orderer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/tlsca
    networks:
      default:
        aliases:
          - orderer.example.com

  org1peer1:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT
      - CORE_PEER_ID=peer0.org1.example.com
      - FABRIC_LOGGING_SPEC=info
      # - CORE_CHAINCODE_STARTUPTIMEOUT=30s
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_BASE_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BASEOS_FIXTURE_TAG}
      - CORE_CHAINCODE_EXECUTETIMEOUT=120s
      - CORE_VM_DOCKER_ATTACHSTDOUT=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=127.0.0.1:7051
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=false
      - CORE_PEER_GOSSIP_ORGLEADER=true
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      - CORE_PEER_GOSSIP_PVTDATA_RECONCILESLEEPINTERVAL=1s
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "7051:7051"
    expose:
      - "7051"
      - "7052"
    volumes:
      - /var/run/:/host/var/run/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/orgs/tls.example.com/tlsca
    networks:
      default:
        aliases:
          - peer0.org1.example.com
    depends_on:
      - orderer1
      - builder
      - golangruntime
      - chaincoded

  org1peer2:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT
      - CORE_PEER_ID=peer1.org1.example.com
      - FABRIC_LOGGING_SPEC=info
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_BASE_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BASEOS_FIXTURE_TAG}
      - CORE_CHAINCODE_EXECUTETIMEOUT=120s
      - CORE_VM_DOCKER_ATTACHSTDOUT=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7151
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7152
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7151
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7151
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=false
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      - CORE_PEER_GOSSIP_PVTDATA_RECONCILESLEEPINTERVAL=1s
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "7151:7151"
    expose:
      - "7151"
      - "7152"
    volumes:
      - /var/run/:/host/var/run/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/msp/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/orgs/tls.example.com/tlsca
    networks:
      default:
        aliases:
          - peer1.org1.example.com
    depends_on:
      - orderer1
      - builder
      - golangruntime
      - chaincoded

  org2peer1:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT
      - CORE_PEER_ID=peer0.org2.example.com
      - FABRIC_LOGGING_SPEC=info
      # - CORE_CHAINCODE_STARTUPTIMEOUT=30s
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_BASE_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BASEOS_FIXTURE_TAG}
      - CORE_CHAINCODE_EXECUTETIMEOUT=120s
      - CORE_VM_DOCKER_ATTACHSTDOUT=false
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
      - CORE_PEER_ADDRESS=peer0.org2.example.com:8051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:8051
      - CORE_PEER_GOSSIP_BOOTSTRAP=127.0.0.1:8051
      #- CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:9051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      - CORE_PEER_GOSSIP_PVTDATA_RECONCILESLEEPINTERVAL=1s
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "8051:8051"
    expose:
      - "8051"
      - "8052"
    volumes:
      - /var/run/:/host/var/run/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/msp/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/orgs/tls.example.com/tlsca
    networks:
      default:
        aliases:
          - peer0.org2.example.com
    depends_on:
      - orderer1
      - builder
      - golangruntime
      - chaincoded

  org2peer2:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT
      - CORE_PEER_ID=peer1.org2.example.com
      - FABRIC_LOGGING_SPEC=info
      # - CORE_CHAINCODE_STARTUPTIMEOUT=30s
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_BASE_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BASEOS_FIXTURE_TAG}
      - CORE_CHAINCODE_EXECUTETIMEOUT=120s
      - CORE_VM_DOCKER_ATTACHSTDOUT=false
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_ADDRESS=peer1.org2.example.com:9051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:8051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      - CORE_PEER_GOSSIP_PVTDATA_RECONCILESLEEPINTERVAL=1s
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "9051:9051"
    expose:
      - "9051"
      - "9052"
    volumes:
      - /var/run/:/host/var/run/
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/msp/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/tls/peer
      - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/tls.example.com/tlsca:/etc/hyperledger/orgs/tls.example.com/tlsca
    networks:
      default:
        aliases:
          - peer1.org2.example.com
    depends_on:
      - orderer1
      - builder
      - golangruntime
      - chaincoded

 # builder is only here to create a dependency on the image (not used as part of compose)
  builder:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
    command: tail -F anything
    logging:
      driver: none

 # golangruntime is only here to create a dependency on the image (not used as part of compose)
  golangruntime:
    image: ${FABRIC_BASE_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${FABRIC_ARCH}${FABRIC_ARCH_SEP}${FABRIC_BASEOS_FIXTURE_TAG}
    command: tail -F anything
    logging:
      driver: none

networks:
    default:
